/*****************\
| Joseph  Dykstra |
| 2012-09-25      |
| 2013-10-19      |
>*****************<
| Break Out       |
\*****************/

#include "Highscore.nxc"
#include "SoundEnd.nxc"


#define BALL_R    2    //Pixel Radius of the ball
#define SPACE     2    //Pixel Spacing between wall and bricks
#define NO_X      5    //Number of bricks x
#define NO_Y      4    //Max number of bricks y
#define WIDTH     20   //Pixel width of a brick
#define HEIGHT    10   //Pixel height of a brick
#define BMS       6    //Bouncer Max Speed
#define BOUNCER_Y 1    //Bouncer Y
#define BOUNCER_W 20   //Bouncer width

#define GAME_LEVEL_UP      0
#define GAME_RUNNING       1
#define GAME_DIED          2

int BallX, BallY,  BouncerX, SpeedX, SpeedY, GameStatus, Level, angle = 0, i = 0, j = 0; //Old Vars
int k, l, PreL, PreK, BouncerSpeed = 0, Score, Lives, WaitTime = 50, LBX, LBY; //New Vars
bool Block[NO_X][NO_Y], Retry = true;
string msg; //debug messages
  

void MoveBall() {
	LBX = BallX; LBY = BallY;
	msg = StrCat(msg," WT=",NumToStr(WaitTime));
	msg = StrCat(msg," BX+SX=",NumToStr(BallX+SpeedX)," BY+SY=",NumToStr(BallY+SpeedY));
	PreK = k;
	PreL = l;
	BallX += SpeedX;
	BallY += SpeedY;
	if ( BallY<BOUNCER_Y+BALL_R && BallY>BOUNCER_Y-BALL_R && BallX>BouncerX-BALL_R && BallX<BouncerX+BOUNCER_W+BALL_R ) {
		i = SpeedX / abs(SpeedX);
		angle = BallX - BouncerX;
		msg = StrCat(msg, " Angle=", NumToStr(angle), ", i=", NumToStr(i));
		///*
		              {SpeedX = -3; SpeedY = 1;} //0    | Ball>o______<Bouncer|
		if (angle>0)  {SpeedX = -2; SpeedY = 2;} //123  |      _o_____        |
		if (angle>3)  {SpeedX = -1; SpeedY = 3;} //4567 |      __o____        |
		if (angle>7)  {SpeedX = 0;  SpeedY = 3;} //8901 |      ___o___        |
		if (angle>11) {SpeedX = 1;  SpeedY = 3;} //2345 |      ____o__        |
		if (angle>15) {SpeedX = 2;  SpeedY = 2;} //678  |      _____o_        |
		if (angle>18) {SpeedX = 3;  SpeedY = 1;} //9    |      ______o        |
		//*/
		BallY = 4;
	}
	for (int n = 0; n<NO_Y; n++) {
		if (BallY < 63 - HEIGHT / 2 - n * HEIGHT) k = n;
	}
	for (int n = 0; n < NO_X; n++) {
		if (BallX > (n + 1) * WIDTH + WIDTH / 2) l = n;
	}
/*
enough of this wacky "for" loop junk
use the vars "BallY" and "BallX" to derive the block position.
also check if it is hitting 2 or so...
*/


	msg = StrCat(msg, " k=", NumToStr(k), "  l=", NumToStr(l));
	if (BallY > 63 - (HEIGHT * NO_Y) && Block[l][k]) {
		msg = StrCat(msg, "  BD");
		Block[l][k] = 0;
		if (PreL != l) SpeedX *= -1;
		if (PreK != k) SpeedY *= -1;
		if ((PreK == k) && (PreL == l)) SpeedY *= -1;
		Score++;
	}
	if (BallX <= BALL_R) {
		SpeedX *= -1;
		BallX = BALL_R;
	}
	if (BallX >= 99 - BALL_R) {
		SpeedX *= -1;
		BallX = 99-BALL_R;
	}
	if (BallY > 63 - BALL_R) {
		SpeedY *= -1;
		BallY = 63-BALL_R;
	}
	if (BallY < 0 - BALL_R) {
		GameStatus = GAME_DIED;
	}
}


void MoveBouncer() {
	if (ButtonPressed(BTNLEFT)) BouncerSpeed -= 1;
	else if (ButtonPressed(BTNRIGHT)) BouncerSpeed += 1;
	else BouncerSpeed = 0;

	if (BouncerSpeed > BMS) BouncerSpeed = BMS;
	if (BouncerSpeed < -BMS) BouncerSpeed = -BMS;
	msg = StrCat(msg, " BCR=", NumToStr(BouncerSpeed));

	BouncerX += BouncerSpeed;
	if (BouncerX > 99-BOUNCER_W) BouncerX = 99 - BOUNCER_W;
	if (BouncerX < 0) BouncerX = 0;
	SendResponseString(MAILBOX10, msg); //MoveBouncer() debugging messages
	}


void Draw() {
	ClearScreen();
	for (j = 0; j < NO_Y; j++) {
		for (i = 0; i < NO_X; i++) {
			if (Block[i][j]) {
				int x = SPACE + (i * WIDTH);
				int y = (64 - SPACE) - ((j + 1) * HEIGHT);
				int w = WIDTH - SPACE * 2;
				int h = HEIGHT - SPACE * 2;
				RectOut(x, y, w, h, 0);
			}
		}
	}
	CircleOut(BallX, BallY, BALL_R, 32); //Fill Circle (size was 3)
	//if (WaitTime<30) CircleOut(LBX, LBY, 3, 0); //Double Ball if Refresh Rate is too fast
	LineOut(BouncerX, 0, BouncerX + 20, 0, 0);
	while (ButtonPressed(BTNCENTER)) {}
	SendResponseString(MAILBOX10, msg); //MoveBall() and Draw() debugging messages
}


void Reset() {
	if (GameStatus==GAME_LEVEL_UP) {
		for (j = 0; j < NO_Y; j++) {
			for (i = 0; i < NO_X; i++) {
				Block[i][j] = (j<Level);
			}
		}
	}
	BallX = 3;
	LBX = 3;
	BallY = 20;
	LBY = 20;
	BouncerX = 10;
	SpeedX = 2;
	SpeedY = -2;
	//GameStatus = 1; // level up?
	GameStatus = GAME_RUNNING;
	BouncerSpeed = 0;
	Draw();
	msg = StrCat("3       ", NumToStr(Lives), (Lives == 1) ? " Life" : " Lives");
	TextOut(0, LCD_LINE6, msg, 0);
	for (i = 3; i > 0; i--) {
		TextOut(0, LCD_LINE6, NumToStr(i), 0); //3-2-1 countdown
		Wait(1000);
	}
}


void CheckEnd() {
	int n = 0;
	for(j = 0; j < NO_Y; j++) {
		for(i = 0; i < NO_X; i++) {
			n += Block[i][j];
		}
	}
	if (n==0) GameStatus = GAME_LEVEL_UP;
}


bool RetryGame() {
	Score = ((Level - 1) * 100) + (Score * 5);
	if (Score > readHigh("BreakoutHigh.dat")) writeHigh("BreakoutHigh.dat", Score);
	TextOut(25, LCD_LINE4, "GAME OVER", 1);
	Wait(1500);
	
	msg = StrCat("S=", NumToStr(Score), ", HS=", NumToStr(readHigh("BreakoutHigh.dat")));
	TextOut(25, LCD_LINE3, StrCat("Score: ", NumToStr(Score)), 0);
	TextOut(10, LCD_LINE4, StrCat("HighScore: ", NumToStr(readHigh("BreakoutHigh.dat"))), 0);
	
	TextOut(33, LCD_LINE7, "Retry?", 0);
	ClearLine(LCD_LINE8);
	TextOut(0, LCD_LINE8, "Yes", 0);
	TextOut(88, LCD_LINE8, "No", 0);
	SendResponseString(MAILBOX10, msg);
	msg = "";
	
	while (ButtonPressed(BTNLEFT) || ButtonPressed(BTNRIGHT)) {} // Wait for release
	until (ButtonPressed(BTNLEFT) || ButtonPressed(BTNRIGHT)) {} // Wait for press
	return (ButtonPressed(BTNLEFT));
}


task main() {
	Level = 1;
	while (Retry == true) {
		Score = 0;
		Lives = 3;
		while (Lives > 0) {
			Reset();
			while (GameStatus == GAME_RUNNING) {
				msg = ""; //Reset Debug Stream
				//GameStatus = 0;
				CheckEnd();
				MoveBouncer();
				MoveBall();
				Wait(WaitTime);
				Draw();
				Wait(WaitTime);
			}
			if (GameStatus == GAME_LEVEL_UP) { //Level up
				Level++;
				Score = 0;
				WaitTime = WaitTime * 4 / 5;
				SoundEnd(soundWin);
			}
			if (GameStatus == GAME_DIED) { //Ball fell into chasm
				Lives--;
				PlayTone(3000, 500);
				SoundEnd(soundLose);
			}
		}
		if (GameStatus==GAME_DIED) {
			Retry = RetryGame();
			Level = 1;
		}
	}
}
